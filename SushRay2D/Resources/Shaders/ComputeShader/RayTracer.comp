#version 460 core

#define PI 3.1415926535897932384626433832795

//2D raytracing
//Author: SupersushiMega

//Splits the raycasts into n amount of sectors where n is the amount of workgroups in the x axis;
uniform int width;	//width of the lightmap
uniform int height;	//height of the lightmap
uniform int radius;	//radius of the light cirle if it is not disrupted
uniform int rayCount;	//total amount of rays to be cast
uniform int map_nrTilesX;	//number of tiles in the x direction of the tilemap
uniform int map_nrTilesY;	//number of tiles in the y direction of the tilemap
uniform int set_nrTilesX;	//number of tiles in the x direction of the tileset
uniform int set_nrTilesY;	//number of tiles in the y direction of the tileset

uniform vec2 startPos;	//ray start position

layout(RGBA32F) volatile coherent uniform precise image2D lightMapOut;	//texture0
uniform sampler2D tileSetColor;	//texture1
uniform sampler2D tileSetReflect;	//texture2

layout(local_size_x = 1, local_size_y = 1) in;	//size of the workgroup

const unsigned int SecSize = rayCount / gl_NumWorkGroups.x;	//calculate size of 1 sector
unsigned int rayCntr = 0;	//counter for rays
unsigned int r;	//counter for radius
int arrayPos = 0;

const float angleDelta = float(2.0 * PI) / rayCount;	//angle difference between two neighboring rays

vec2 coord = startPos;	//current position of the ray
vec2 xyDelta;	//xy difference per r
double map_TileSizeX = double(map_nrTilesX)/width;
double map_TileSizeY = double(map_nrTilesY)/height;	//Size of 1 tile in the tilemap
vec2 set_TileSize = vec2(1.0/set_nrTilesX, 1.0/set_nrTilesY);	//Size of 1 tile in the tileSet

vec4 outCol;	//output color
vec4 colDelta = vec4(0.08);	//color addition per ray

layout(binding=0) buffer WorldMap
{
	int TileID[256];
};

void main()
{
	for(rayCntr = 0; rayCntr < SecSize; rayCntr++)
	{
		coord = startPos;
		xyDelta.x = sin(angleDelta * ((SecSize * gl_WorkGroupID.x) + rayCntr));
		xyDelta.y = cos(angleDelta * ((SecSize * gl_WorkGroupID.x) + rayCntr));
		
		for(r = 0; r < radius; r++)
		{
			if(r > 0)
			{
				outCol = imageLoad(lightMapOut, ivec2(floor(coord))) + (colDelta * vec4(1.0 - (float(r)/radius)));	//get color of current position and add colDelta to it. With falloff calculation.
			}
			else
			{
				outCol = imageLoad(lightMapOut, ivec2(floor(coord))) + colDelta;
			}
			//outCol = texture(tileSetColor, coord / vec2(width, height));

			arrayPos = int((floor(map_TileSizeY * coord.y) * 16) + floor(map_TileSizeX * coord.x));

			if(TileID[arrayPos] > 0)
			{
				xyDelta.x = -xyDelta.x;
				xyDelta.y = -xyDelta.y;
			}

			//outCol = vec4(arrayPos/(16*16), 0.0, 0.0, 0.0);

			//outCol = vec4(1, 1.0, 0.0, 1);
			
			//outCol = vec4(floor(coord.y * map_TileSize.y));

			//outCol Clamping
			//===========================================
			//if(outCol.r > 1)
			//{
			//	outCol.r = 1;
			//}
			//if(outCol.g > 1)
			//{
			//	outCol.g = 1;
			//}
			//if(outCol.b > 1)
			//{
			//	outCol.b = 1;
			//}
			//===========================================

			outCol.a = 1;	//reset alpha to 1 


			imageStore(lightMapOut, ivec2(floor(coord)), outCol);	//write outCol to lightmap
			
			coord += xyDelta;	//add xyDelta to coordinates
		}
	}
	return;
}